using System.Numerics;
using BNLReloadedServer.BaseTypes;

namespace BNLReloadedServer.Service;

public interface IServiceZone : IService
{
    public void SendInitZone(ZoneInitData data);
    public void SendEndMatch(TeamType winner);
    public void SendEndMatchResult(EndMatchData data);
    public void SendKickPlayer(uint playerId, KickReason reason);
    public void SendBlockUpdates(Dictionary<Vector3s, BlockUpdate> updates);
    public void SendUpdateZone(ZoneUpdate data);
    public void SendUnitCreate(uint id, UnitInit data);
    public void SendUnitUpdate(uint id, UnitUpdate data);
    public void SendUnitDrop(uint id);
    public void SendUnitMove(uint id, ulong time, ZoneTransform transform);
    public void SendUnitMoveFail(uint id, ulong time);
    public void SendUnitManeuver(uint id, Maneuver maneuver);
    public void SendUnitControl(uint id);
    public void SendCast(uint unitId, CastData data);
    public void SendImpact(ImpactData data);
    public void SendDoStartReload(uint unitId);
    public void SendDoEndReload(uint unitId);
    public void SendDoCancelReload(uint unitId);
    public void SendDoStartChannel(uint unitId, ChannelData data);
    public void SendDoEndChannel(uint unitId, byte toolIndex);
    public void SendDoDashStartCharge(uint unitId, byte toolIndex);
    public void SendDoDashEndCharge(uint unitId, byte toolIndex);
    public void SendDoToolStartCharge(uint unitId, byte toolIndex);
    public void SendDoToolEndCharge(uint unitId, byte toolIndex);
    public void SendDoGroundSlamCast(uint unitId, byte toolIndex);
    public void SendDoStartBuild(uint unitId, BuildInfo info);
    public void SendDoCancelBuild(uint unitId);
    public void SendSwitchGear(ushort rpcId, bool? accepted, string? error = null);
    public void SendStartReload(ushort rpcId, bool? accepted, string? error = null);
    public void SendReload(ushort rpcId, bool? accepted, string? error = null);
    public void SendStartChannel(ushort rpcId, bool? accepted, string? error = null);
    public void SendDashEndChargeSuccess(ushort rpcId, bool? isMaxCharge);
    public void SendDashEndChargeFail(ushort rpcId, string error);
    public void SendToolEndChargeSuccess(ushort rpcId, bool accepted, float? charge);
    public void SendToolEndChargeFail(ushort rpcId, string error);
    public void SendStartBuild(ushort rpcId, bool? accepted, string? error = null);
    public void SendCastAbility(ushort rpcId, bool? accepted, string? error = null);
    public void SendDoCastAbility(uint unitId, AbilityCastData data);
    public void SendCreateProjectile(ulong shotId, ProjectileInfo info);
    public void SendMoveProjectile(ulong shotId, ulong time, ZoneTransform transform);
    public void SendDropProjectile(ulong shotId);
    public void SendBroadcastZoneEvent(ZoneEvent data);
    public void SendPlayerCommand(uint playerId, Key commandKey);
    public void SendKill(KillInfo info);
    public void SendDamage(DamageInfo info);
    public void SendDeviceBuilt(uint builderPlayerId, Key deviceKey, Vector3 position);
    public void SendBlockMined(uint minerPlayerId, Key blockKey);
    public void SendResourceBonusIncreased();
    public void SendPickupTaken(uint playerId, Key pickupKey);
    public void SendUpdateBarriers(List<BarrierLabel> barriers);
    public void SendPortalTeleport(uint teleportedUnit, uint portalFrom, uint portalTo);
    public void SendDoStartRecall(uint unitId, float duration, ulong endTime);
    public void SendDoCancelRecall(uint unitId);
    public void SendDoRecall(uint unitId);
    public void SendSurrenderStart(ushort rpcId, SurrenderStartResultType? result, string? error = null);
    public void SendSurrenderBegin(ulong endTime);
    public void SendSurrenderProgress(Dictionary<uint, bool?> votes);
    public void SendSurrenderEnd(TeamType team, bool result);
    public void SendTurretAttack(uint turretId, Vector3 shotPos, List<ShotData> shots);
    public void SendFireMortar(uint mortarId, Vector3 target);
    public void SendMortarAttack(uint mortarId, Vector3 shotPos, List<ShotData> shots);
    public void SendTeslaAttack(uint teslaId, uint targetId, List<uint> chargePath);
    public void SendDrillAttack(uint drillId, Vector3 shotPos, List<ShotData> shots);
}